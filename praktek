{
  "nbformat": 5,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yunita1/Python/blob/main/latihan/Python_for_Data_Science.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "to44qXDTNKY8"
      },
      "outputs": [],
      "source": [
        "#Import Library Matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Import Library Numpy\n",
        "import numpy as np\n",
        "\n",
        "#Menghitung jumlah data 100 yang berjarak dari 0 sampai 2Ï€\n",
        "x = np.linspace(0,2*np.pi, 100)\n",
        "#Kemudian menghitung cos si x\n",
        "cos_x = np.cos(x)"
      ],
      "metadata": {
        "id": "NGAzfQZ5P8qU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Membuat line plot\n",
        "fig, ax = plt.subplots()\n",
        "_ = ax.plot(x, cos_x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "lhiUfFTmRfAl",
        "outputId": "253b848b-b7aa-4cd3-9ce9-b66eeb30ccd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Membuat sumbu x dan y memiliki rasio yang sama\n",
        "fig, ax = plt.subplots()\n",
        "_ = ax.plot(x, cos_x)\n",
        "_ = ax.set_aspect('equal')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 154
        },
        "id": "8110I44bS8OV",
        "outputId": "4d35e4f9-365f-4c9a-cc0a-97fafc91e97c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Membuat sumbu x dan y memiliki rasio yang sama\n",
        "fig, ax = plt.subplots()\n",
        "_ = ax.plot(x, cos_x, markersize=20, linestyle='-.',\n",
        "            color='red', label='cos')\n",
        "_ = ax.set_aspect('equal')\n",
        "_ = ax.legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 154
        },
        "id": "b8PniIbXTkTr",
        "outputId": "81d817a2-2149-4e14-a9bb-bd4408dc5733"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Membuat scatter plot\n",
        "x = np.array([1, 2, 3])\n",
        "y = np.array([4, 5, 6])\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "#Membuat scatter plot\n",
        "_ = ax.scatter(x, y)\n",
        "#Set label pada variabel x dan y\n",
        "_ = ax.set_xlabel('x axis')\n",
        "_ = ax.set_ylabel('y axis')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "oW8gcE9gVsUE",
        "outputId": "03c3e6a5-5530-43f7-d761-e50b8dc35fa2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Membuat Bar Plot\n",
        "kategory = ['Panas', 'Dingin']\n",
        "jumlah = [8, 5]\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "#Membuat scatter bar\n",
        "_ = ax.bar(kategory, jumlah)\n",
        "#Set label pada variabel x dan y\n",
        "_ = ax.set_xlabel('Kategory')\n",
        "_ = ax.set_ylabel('Jumlah')\n",
        "#Set title untuk plot\n",
        "_ = ax.set_title('Penikmat Kopi')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "l-ZP7sLrYLJh",
        "outputId": "dc35ff5f-9a5e-4baf-b103-9a1490d41a6d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXgAAAEWCAYAAABsY4yMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAUc0lEQVR4nO3de5RlZX3m8e9DA9PcIlFKgkDbeAlZhBEkFYOXOAQ0QVFwFCOMmphoWpPxQiI6mjEDJsaY0TiTqJOxQ4CogAqIUYmIN4xIQLqbRm5iBLlGoRAQmjv4yx9nVzjdVFefrq5dVbz9/ax1Vu2zb+/v1DrrqV3v2ed9U1VIktqzxXwXIEnqhwEvSY0y4CWpUQa8JDXKgJekRhnwktQoA17NSbIkyZoki7rn5yR53XzX1acklyU5YL7r0MJiwGteJbkmyT1dIN+U5MQk22/KOavquqravqoemq06R5Hk2CSf2MA+1yR53tDzI5LcluS/bErbVfWLVXXOppxD7THgtRC8uKq2B/YDxoF3zXM9cyLJbwMfAQ6pqm/Mdz1qjwGvBaOqbgS+COwNkGT/JOcluT3JxcNdEF23y58l+VaSO5OcnWSnbtvSJJVky3XbSLJLku8kedvQed7TtbMmyeeTPC7JSUnuSHJhkqVDx/91kuu7bSuT/Gq3/mDgj4FXdOe5eLrXmuT1wF8Bv1FV53XrnpDkc0luTfL9JL83tP+xSU5L8qnu9a5Kss/Q9rX+M5DAgNcCkmR34IXARUl2Bc4E3gM8FjgaOD3J2NAh/w34HeDxwNbdPtOdfw/gG8CHq+r9Q5uOAF4N7Ao8GfgX4ISu3SuAY4b2vRDYt9t2MnBqksVVdRbwXuBTXffQPqzf7wN/ChxUVSuG1n8SuAF4AnA48N4kBw5tPww4dajtzybZarrXrM2bAa+F4LNJbgfOZRDA7wVeBfxTVf1TVf20qr4MrGDwB2DSCVX1vaq6B/g0g+Bdn72ArwPHVNXydbadUFVXVdVPGPwHcVVVfaWqHmQQqE+f3LGqPlFVP66qB6vqr4D/BOy5ka/3+cD5wCWTK7o/bs8G/kdV3VtVq4HjgN8aOm5lVZ1WVQ8AHwQWA/tvZNvajBjwWgheUlU7VtUTq+oPusB+IvDyrnvm9u4PwHOAXYaO+9HQ8t3AdB/OvhK4EThtim03DS3fM8Xz/zhvkqOTXJHkJ11NjwF2GuE1Dvt94OeB45KkW/cE4NaqunNov2sZ/Fcx6frJhar6KQ9f7UtTMuC1UF0PfLwL/snHdlX1vhme71jgFuDkydsnN1bX3/524DeBn62qHYGfAJMhPerQrDcBBwG/Cvy/bt2/AY9NssPQfksY/FGatPtQLVsAu3XHSVMy4LVQfQJ4cZLfSLIoyeIkByTZbYbnewB4ObAd8LEuIDfWDsCDwASwZZL/BfzM0PabgKWjnLuq/o1ByB+c5P9U1fXAecBfdK/1acBrGfweJv1Skpd2Hx4fBdzHoKtHmpIBrwWpC7zDGNyZMsHgiv5tbMJ7tqruB14K7AwcP4OQ/xJwFvA9Bt0n9zLUbcKgvx7gx0lWjVDPdcCBwOFJ/gI4EljK4Kr8DAafF3xl6JB/BF4B3MbgQ+GXdv3x0pTihB/SwpfkWOApVfWq+a5Fjx5ewUtSowx4SWqUXTSS1Civ4CWpUY8Yq2M+7bTTTrV06dL5LkOSHjVWrlx5S1WNTbVtQQX80qVLWbFixYZ3lCQBkOTa9W2zi0aSGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1qteAT/KHSS5LcmmSU5Is7rM9SdLDegv4bk7NNwPjVbU3sIjB3JeSpDnQdxfNlsA23QQF2+LsM5I0Z3r7JmtV3ZjkA8B1DOa1PLuqzl53vyTLgGUAS5YsmXF7S99x5oyPVduued8h812CNC/67KL5WQYz8uzBYGLg7ZI8YrKCqlpeVeNVNT42NuVwCpKkGeizi+Z5wA+qaqKbVuwzwLN6bE+SNKTPgL8O2D/JtknCYILhK3psT5I0pLeAr6oLgNOAVcAlXVvL+2pPkrS2XocLrqpjgGP6bEOSNDW/ySpJjTLgJalRBrwkNcqAl6RGGfCS1CgDXpIaZcBLUqMMeElqlAEvSY0y4CWpUQa8JDXKgJekRhnwktQoA16SGmXAS1KjDHhJalSfk27vmWT10OOOJEf11Z4kaW29zehUVVcC+wIkWQTcCJzRV3uSpLXNVRfNQcBVVXXtHLUnSZu9uQr4I4BT5qgtSRJzEPBJtgYOBU5dz/ZlSVYkWTExMdF3OZK02ZiLK/gXAKuq6qapNlbV8qoar6rxsbGxOShHkjYPcxHwR2L3jCTNuV4DPsl2wPOBz/TZjiTpkXq7TRKgqu4CHtdnG5KkqflNVklqlAEvSY0y4CWpUQa8JDXKgJekRhnwktQoA16SGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1yoCXpEYZ8JLUKANekhplwEtSowx4SWpU31P27ZjktCTfTXJFkmf22Z4k6WG9TtkH/DVwVlUdnmRrYNue25MkdXoL+CSPAZ4LvAagqu4H7u+rPUnS2vrsotkDmABOSHJRkuOSbLfuTkmWJVmRZMXExESP5UjS5qXPgN8S2A/426p6OnAX8I51d6qq5VU1XlXjY2NjPZYjSZuXPgP+BuCGqrqge34ag8CXJM2B3gK+qn4EXJ9kz27VQcDlfbUnSVpb33fRvAk4qbuD5mrgd3puT5LU6TXgq2o1MN5nG5KkqflNVklqlAEvSY0y4CWpUQa8JDXKgJekRhnwktQoA16SGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1yoCXpEYZ8JLUKANekhplwEtSowx4SWpUrzM6JbkGuBN4CHiwqpzdSZLmSN9zsgL8WlXdMgftSJKG2EUjSY3q+wq+gLOTFPDRqlq+7g5JlgHLAJYsWdJzOdL8WfqOM+e7BC1Q17zvkF7O2/cV/HOqaj/gBcB/T/LcdXeoquVVNV5V42NjYz2XI0mbj14Dvqpu7H7eDJwBPKPP9iRJD+st4JNsl2SHyWXg14FL+2pPkrS2PvvgdwbOSDLZzslVdVaP7UmShvQW8FV1NbBPX+eXJE1vpIBP8ixg6fD+VfWxnmqSJM2CDQZ8ko8DTwZWM/hGKgxufzTgJWkBG+UKfhzYq6qq72IkSbNnlLtoLgV+ru9CJEmza71X8Ek+z6ArZgfg8iTfBu6b3F5Vh/ZfniRppqbrovnAnFUhSZp16w34qvrGXBYiSZpdG+yDT7J/kguTrElyf5KHktwxF8VJkmZulA9ZPwwcCfwrsA3wOuAjfRYlSdp0I41FU1XfBxZV1UNVdQJwcL9lSZI21Sj3wd+dZGtgdZL/DfwQJwqRpAVvlKB+NbAIeCNwF7A78LI+i5IkbboNXsFX1bXd4j3Au/stR5I0W6b7otMlDL7oNKWqelovFUmSZsV0V/AvmrMqJEmzbrovOl07/DzJz0y3vyRpYRlluODXM+h7v5eHu2wKeFKPdUmSNtEoV+RHA3tX1S0zaSDJImAFcGNV2e0jSXNklNskrwLu3oQ23gJcsQnHS5JmYJQr+HcC5yW5gLWHC37zhg5MshtwCPDnwB/NtEhJ0sYbJeA/CnwNuAT46Uae//8Cb2cwpvyUkiwDlgEsWbJkI08vSVqfUQJ+q6ra6KvvJC8Cbq6qlUkOWN9+VbUcWA4wPj7utICSNEtG6YP/YpJlSXZJ8tjJxwjHPRs4NMk1wCeBA5N8YlOKlSSNbpQr+CO7n+8cWrfB2ySr6p2Tx3RX8EdX1atmUKMkaQZGGYtmj7koRJI0u0b5otNvTbW+qj42aiNVdQ5wzshVSZI22ShdNL88tLwYOAhYBYwc8JKkuTdKF82bhp8n2ZHBh6aSpAVsJjMz3QXYLy9JC9woffCf5+FBxhYBewGf7rMoSdKmG6UP/gM8HPAPAtdW1Y39lSRJmg3Tzeh0J4NgzzqbKsl9DAYh+59V9dUe65MkzdB0E35MN37MImBv4KTupyRpgZnJh6xU1UNVdTHwoVmuR5I0S2YU8JOq6qOzVYgkaXZtUsBLkhYuA16SGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1yoCXpEb1FvBJFif5dpKLk1yW5N19tSVJeqRRRpOcqfuAA6tqTZKtgHOTfLGqzu+xTUlSp7eAr6oC1nRPt+oetf4jJEmzqdc++CSLkqwGbga+XFUXTLHPsiQrkqyYmJjosxxJ2qz0GvDdqJP7ArsBz0jyiKGFq2p5VY1X1fjY2Fif5UjSZmVO7qKpqtuBrwMHz0V7kqR+76IZS7Jjt7wN8Hzgu321J0laW5930ewC/EM3+9MWwKer6gs9tidJGtLnXTTfAZ7e1/klSdPzm6yS1CgDXpIaZcBLUqMMeElqlAEvSY0y4CWpUQa8JDXKgJekRhnwktQoA16SGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1yoCXpEYZ8JLUqD7nZN09ydeTXJ7ksiRv6astSdIj9Tkn64PAW6tqVZIdgJVJvlxVl/fYpiSp09sVfFX9sKpWdct3AlcAu/bVniRpbXPSB59kKYMJuC+YYtuyJCuSrJiYmJiLciRps9B7wCfZHjgdOKqq7lh3e1Utr6rxqhofGxvruxxJ2mz0GvBJtmIQ7idV1Wf6bEuStLY+76IJ8PfAFVX1wb7akSRNrc8r+GcDrwYOTLK6e7ywx/YkSUN6u02yqs4F0tf5JUnT85usktQoA16SGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1yoCXpEYZ8JLUKANekhplwEtSowx4SWqUAS9JjTLgJalRBrwkNcqAl6RGGfCS1Kg+52Q9PsnNSS7tqw1J0vr1eQV/InBwj+eXJE2jt4Cvqn8Gbu3r/JKk6c17H3ySZUlWJFkxMTEx3+VIUjPmPeCranlVjVfV+NjY2HyXI0nNmPeAlyT1w4CXpEb1eZvkKcC/AHsmuSHJa/tqS5L0SFv2deKqOrKvc0uSNswuGklqlAEvSY0y4CWpUQa8JDXKgJekRhnwktQoA16SGmXAS1KjDHhJapQBL0mNMuAlqVEGvCQ1yoCXpEYZ8JLUKANekhplwEtSowx4SWpUrwGf5OAkVyb5fpJ39NmWJGltfc7Jugj4CPACYC/gyCR79dWeJGltfV7BPwP4flVdXVX3A58EDuuxPUnSkN4m3QZ2Ba4fen4D8Cvr7pRkGbCse7omyZU91rS52Am4Zb6LWCjyl/NdgdbD92lnE9+jT1zfhj4DfiRVtRxYPt91tCTJiqoan+86pOn4Pu1fn100NwK7Dz3frVsnSZoDfQb8hcBTk+yRZGvgCOBzPbYnSRrSWxdNVT2Y5I3Al4BFwPFVdVlf7Wktdnnp0cD3ac9SVfNdgySpB36TVZIaZcBLUqMM+AUuyUNJVie5NMmpSbad75okWOu9eVmSi5O8NckW3bbxJH+zCef+0yTPm71qN0/2wS9wSdZU1fbd8knAyqr64DyXJa373nw8cDLwrao6Zn4r0ySv4B9dvgk8JcmLk1yQ5KIkX0myM0CSY5Mcn+ScJFcnefPkgUk+m2Rld7W1rFu3KMmJ3X8HlyT5w3l6XXqUq6qbGXwj/Y0ZOCDJF2CD78s/6QYkPDfJKUmO7tafmOTwbvmaJO9Osqp7n/7CfLzGR6N5/yarRpNkSwYDt50FnAvsX1WV5HXA24G3drv+AvBrwA7AlUn+tqoeAH63qm5Nsg1wYZLTgaXArlW1d9fGjnP6otSUqrq6G2Tw8VNsfsT7EtgXeBmwD7AVsApYuZ7T31JV+yX5A+Bo4HWzXX+LDPiFb5skq7vlbwJ/D+wJfCrJLsDWwA+G9j+zqu4D7ktyM7Azg3GA3pzkv3b77A48FbgSeFKSDwFnAmf3/mq0uZrqffls4B+r6l7g3iSfn+b4z3Q/VwIv7bfUdthFs/DdU1X7do83dSNzfgj4cFX9Z+D1wOKh/e8bWn4I2DLJAcDzgGdW1T7ARcDiqrqNwdXTOcAbgON6fzVqVpInMXjP3TzF5ke8Lzfy9JPHz+TYzZYB/+j0GB4e1+e3R9z/tqq6u+u/3B8gyU7AFlV1OvAuYL8+ilX7kowB/5/Bhceod258C3hxksVJtgde1FuBmyn/Ej46HQucmuQ24GvAHhvY/yzgDUmuYNAtc363flfghMlb24B39lCr2jXZfbgV8CDwcWDkO7yq6sIknwO+A9wEXAL8pI9CN1feJilp3iTZvqrWdN/v+GdgWVWtmu+6WuEVvKT5tLybynMx8A+G++zyCl6SGuWHrJLUKANekhplwEtSowx4NSfJmqHlFyb5XpL1zjyf5CXdB31SUwx4NSvJQcDfAC+oqmun2fUlQK8B340lJM0pA15NSvJc4O+AF1XVVd2630tyYTd2+elJtk3yLOBQ4P3d2OZP7h5ndaNvfnNy9MJu/fndiIbvmfxPoRs98f1Do3K+olt/QHf854DLuzHOjxqq8c+TvGWOfzXanFSVDx9NPYAHgFuBp62z/nFDy+8B3tQtnwgcPrTtq8BTu+VfAb7WLX8BOLJbfgOwplt+GfBlBpPL7wxcB+wCHADcBezR7bcUWNUtbwFcNVyTDx+z/fAKXi16ADgPeO066/furqgvAV4J/OK6B3ZjojyLwVAQq4GPMghrgGcCp3bLJw8d9hzglKp6qKpuAr4B/HK37dtV9QOAqroG+HGSpwO/DlxUVT/epFcqTcN+QbXop8BvAl9N8sdV9d5u/YnAS6rq4iSvYXCFva4tgNurat9ZquWudZ4fB7wG+Dng+FlqQ5qSV/BqUlXdDRwCvDLJ5JX8DsAPk2zF4Ap+0p3dNqrqDuAHSV4O/9G/vk+33/kMumMAjhg6/pvAK7oZssaA5wLfXk9pZwAHM7jC/9ImvERpgwx4NauqbmUQpu9KcijwJ8AFDIap/e7Qrp8E3pbBFIhPZhD+r01yMXAZcFi331HAHyX5DvAUHh758AwGIyJezGB0z7dX1Y/WU9P9wNeBT1fVQ7P2YqUpOBaNNKJuxMN7qqqSHMHgA9fDNnTcOufYgsHUdC+vqn/to05pkn3w0uh+CfhwkgC3A7+7MQd3X6b6AnCG4a654BW8JDXKPnhJapQBL0mNMuAlqVEGvCQ1yoCXpEb9OwKnUoxxqRZ7AAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Import Library Numpy\n",
        "import numpy as np\n",
        "\n",
        "a = np.array([1, 2, 3])\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3oGcvlacl96-",
        "outputId": "fa506bc1-0cca-4fb9-81c1-a62af72bd942"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 2, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Cek type data pada numpy\n",
        "a = np.array([1, 2, 3])\n",
        "a.dtype"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vSBrGriEpBPj",
        "outputId": "c1f0d897-1e88-4990-93a3-72820a6b7f25"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('int64')"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Pengoperasian pada array\n",
        "a = np.array([1, 2, 3])\n",
        "f = np.array([1.1, 2.2, 3.3])\n",
        "\n",
        "a + f #Penjumlahan"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oL0GnFqep_fN",
        "outputId": "e78c9503-284f-41ec-ddff-d681d086424d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2.1, 4.2, 6.3])"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Perkalian pada array\n",
        "a * f "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e7W3istorAx_",
        "outputId": "249456ba-4631-4a6e-f09e-2faf5062b361"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1.1, 4.4, 9.9])"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Pemangkatan pada array\n",
        "a ** f "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kgre36bbrIbb",
        "outputId": "53576801-71c0-4f57-b8e1-dd1b4c4d275b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 1.        ,  4.59479342, 37.5405076 ])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Universal function (unfucs) pada numpy seperti sin\n",
        "np.sin(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aPbJghhKrJbr",
        "outputId": "b9eabefb-02bc-408e-dc62-820605a9301a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.84147098, 0.90929743, 0.14112001])"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Mengakses elemen array pada indeks ke 0\n",
        "\n",
        "a = np.array([1, 2, 3])\n",
        "a[0]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-AZtotMMsgtn",
        "outputId": "10acd9c7-9563-455a-a57d-c548767851d5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Mengubah isi pada indeks array no 0\n",
        "a[0] = 10\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i5_MnWUbsuli",
        "outputId": "43e7bf66-56d6-4d03-c8a7-16bb34763cf8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([10,  2,  3])"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Membentuk array 2 dimensi\n",
        "a = np.array([[0, 1, 2, 3],\n",
        "             [10, 11, 12, 13]])\n",
        "a"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WLAyWpzRs0z0",
        "outputId": "625bdce7-9a67-40c0-e23a-822fae93044b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0,  1,  2,  3],\n",
              "       [10, 11, 12, 13]])"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Import Library Pandas\n",
        "import pandas as pd\n",
        "\n",
        "#Membuat series\n",
        "obj = pd.Series([1, 2, 3])\n",
        "obj"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w0W8RZuGvUak",
        "outputId": "f39a1049-7b0b-417f-9e76-35aecfe7692d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    1\n",
              "1    2\n",
              "2    3\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Cek type\n",
        "type(obj)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vIkENYP5wQpJ",
        "outputId": "ca2a35d2-e973-4192-9f6f-a0750f222cda"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.series.Series"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Membuat Dataframe\n",
        "data = {'kota': ['semarang', 'semarang', 'semarang'\n",
        "               , 'bandung', 'bandung', 'bandung'],\n",
        "        'tahun': [2016, 2017, 2018, 2016, 2017, 2018],\n",
        "        'populasi': [1.5, 2.1, 3.2, 2.3, 3.2, 4.5]}\n",
        "frame = pd.DataFrame(data)\n",
        "frame"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "V4alOPX6w0G-",
        "outputId": "91207e32-0ef3-4078-bf4d-f98625e0a409"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       kota  tahun  populasi\n",
              "0  semarang   2016       1.5\n",
              "1  semarang   2017       2.1\n",
              "2  semarang   2018       3.2\n",
              "3   bandung   2016       2.3\n",
              "4   bandung   2017       3.2\n",
              "5   bandung   2018       4.5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c28fa86-33b2-44e1-ba8c-9b65368e8628\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kota</th>\n",
              "      <th>tahun</th>\n",
              "      <th>populasi</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>semarang</td>\n",
              "      <td>2016</td>\n",
              "      <td>1.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>semarang</td>\n",
              "      <td>2017</td>\n",
              "      <td>2.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>semarang</td>\n",
              "      <td>2018</td>\n",
              "      <td>3.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>bandung</td>\n",
              "      <td>2016</td>\n",
              "      <td>2.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>bandung</td>\n",
              "      <td>2017</td>\n",
              "      <td>3.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>bandung</td>\n",
              "      <td>2018</td>\n",
              "      <td>4.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c28fa86-33b2-44e1-ba8c-9b65368e8628')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3c28fa86-33b2-44e1-ba8c-9b65368e8628 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3c28fa86-33b2-44e1-ba8c-9b65368e8628');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Cek type data\n",
        "type(frame)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kddTv2mFyAM0",
        "outputId": "4d636d8a-0e62-4b16-cfcb-f6f1ce3b7f81"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Menampilkan 5 data teratas\n",
        "frame.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "SWVZvX_myKnw",
        "outputId": "9743ba08-fac0-4c39-8bc3-520a7e22c287"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       kota  tahun  populasi\n",
              "0  semarang   2016       1.5\n",
              "1  semarang   2017       2.1\n",
              "2  semarang   2018       3.2\n",
              "3   bandung   2016       2.3\n",
              "4   bandung   2017       3.2"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bad0b62d-f29d-48a9-8430-4bbb2cba8a0d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kota</th>\n",
              "      <th>tahun</th>\n",
              "      <th>populasi</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>semarang</td>\n",
              "      <td>2016</td>\n",
              "      <td>1.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>semarang</td>\n",
              "      <td>2017</td>\n",
              "      <td>2.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>semarang</td>\n",
              "      <td>2018</td>\n",
              "      <td>3.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>bandung</td>\n",
              "      <td>2016</td>\n",
              "      <td>2.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>bandung</td>\n",
              "      <td>2017</td>\n",
              "      <td>3.2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bad0b62d-f29d-48a9-8430-4bbb2cba8a0d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bad0b62d-f29d-48a9-8430-4bbb2cba8a0d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bad0b62d-f29d-48a9-8430-4bbb2cba8a0d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Menampilkan 5 data terbawah\n",
        "frame.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "pArxE5RXyRPK",
        "outputId": "b7818a15-addc-4444-81bd-88f4101b54aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       kota  tahun  populasi\n",
              "1  semarang   2017       2.1\n",
              "2  semarang   2018       3.2\n",
              "3   bandung   2016       2.3\n",
              "4   bandung   2017       3.2\n",
              "5   bandung   2018       4.5"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dfbdb8e9-8d2a-4b5a-8aa4-662a37c1e798\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>kota</th>\n",
              "      <th>tahun</th>\n",
              "      <th>populasi</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>semarang</td>\n",
              "      <td>2017</td>\n",
              "      <td>2.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>semarang</td>\n",
              "      <td>2018</td>\n",
              "      <td>3.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>bandung</td>\n",
              "      <td>2016</td>\n",
              "      <td>2.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>bandung</td>\n",
              "      <td>2017</td>\n",
              "      <td>3.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>bandung</td>\n",
              "      <td>2018</td>\n",
              "      <td>4.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dfbdb8e9-8d2a-4b5a-8aa4-662a37c1e798')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dfbdb8e9-8d2a-4b5a-8aa4-662a37c1e798 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dfbdb8e9-8d2a-4b5a-8aa4-662a37c1e798');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 43
        }
      ]
    }
  ]
}
